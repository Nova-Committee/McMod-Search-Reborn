buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "com.github.johnrengelman.shadow"

group = 'nova.committee'
version = '1.18.2-1.0.1'

java {
    archivesBaseName = 'MCMOD-Search-Reborn-forge'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

minecraft {

    mappings channel: 'official', version: '1.18.2'


    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'mcmodwiki'

            mods {
                mcmodwiki {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'mcmodwiki'

            mods {
                mcmodwiki {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'mcmodwiki'

            mods {
                mcmodwiki {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'mcmodwiki', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mcmodwiki {
                    source sourceSets.main
                }
            }
        }
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

configurations {
    shadow
    compile.extendsFrom shadow
}

dependencies {
//    shadow 'org.jsoup:jsoup:1.14.3'
//    shadow 'com.squareup.okhttp3:okhttp:4.9.3'
//    shadow 'com.squareup.retrofit2:retrofit:2.9.0'
    minecraft 'net.minecraftforge:forge:1.18.2-40.0.44'
    compileOnly fg.deobf("mezz.jei:jei-1.18.2:9.5.5.174") // Adds JEI API as a compile dependency
    runtimeOnly fg.deobf("mezz.jei:jei-1.18.2:9.5.5.174") // Adds the full JEI mod as a runtime dependency
}

shadowJar {
    configurations = Arrays.asList(project.configurations.shadow)
    relocate 'com.squareup.okhttp3.okhttp', 'nova.committee.mcmodwiki.okhttp'
    relocate 'com.squareup.retrofit2.retrofit', 'nova.committee.mcmodwiki.retrofit'
    relocate 'org.jsoup.jsoup', 'nova.committee.mcmodwiki.jsoup'

    archiveClassifier.set("")
}

reobf {
    shadowJar {}
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "mcmodwiki",
                "Specification-Vendor"    : "cnlimiter",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "cnlimiter",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
